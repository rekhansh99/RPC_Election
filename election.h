/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _ELECTION_H_RPCGEN
#define _ELECTION_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct voter {
	char id[9];
	char name[32];
	char gender;
	int vote;
};
typedef struct voter voter;

struct candidate {
	char name[32];
	int votes;
	bool_t valid;
};
typedef struct candidate candidate;

struct candidate_stats {
	double total_vote_percent;
	double male_vote_percent;
	double female_vote_percent;
};
typedef struct candidate_stats candidate_stats;

struct stats {
	double total_vote_percent;
	double male_vote_percent;
	double female_vote_percent;
	struct {
		u_int candidate_len;
		candidate_stats *candidate_val;
	} candidate;
};
typedef struct stats stats;

typedef voter *voter_ptr;

typedef struct {
	u_int candidate_list_len;
	candidate *candidate_list_val;
} candidate_list;

struct register_voter_1_argument {
	char *arg1;
	char arg2;
};
typedef struct register_voter_1_argument register_voter_1_argument;

struct cast_vote_1_argument {
	char *arg1;
	char *arg2;
};
typedef struct cast_vote_1_argument cast_vote_1_argument;

#define ELECTION 0x20000001
#define ELECTIONVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define register_voter 1
extern  char ** register_voter_1(char *, char , CLIENT *);
extern  char ** register_voter_1_svc(char *, char , struct svc_req *);
#define verify_voter 2
extern  bool_t * verify_voter_1(char *, CLIENT *);
extern  bool_t * verify_voter_1_svc(char *, struct svc_req *);
#define cast_vote 3
extern  bool_t * cast_vote_1(char *, char *, CLIENT *);
extern  bool_t * cast_vote_1_svc(char *, char *, struct svc_req *);
#define tally_results 4
extern  candidate_list * tally_results_1(CLIENT *);
extern  candidate_list * tally_results_1_svc(struct svc_req *);
#define announce_winner 5
extern  char ** announce_winner_1(CLIENT *);
extern  char ** announce_winner_1_svc(struct svc_req *);
#define add_candidate 6
extern  bool_t * add_candidate_1(char *, CLIENT *);
extern  bool_t * add_candidate_1_svc(char *, struct svc_req *);
#define remove_candidate 7
extern  bool_t * remove_candidate_1(char *, CLIENT *);
extern  bool_t * remove_candidate_1_svc(char *, struct svc_req *);
#define invalidate_candidate 8
extern  bool_t * invalidate_candidate_1(char *, CLIENT *);
extern  bool_t * invalidate_candidate_1_svc(char *, struct svc_req *);
#define calc_statistics 9
extern  stats * calc_statistics_1(CLIENT *);
extern  stats * calc_statistics_1_svc(struct svc_req *);
extern int election_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define register_voter 1
extern  char ** register_voter_1();
extern  char ** register_voter_1_svc();
#define verify_voter 2
extern  bool_t * verify_voter_1();
extern  bool_t * verify_voter_1_svc();
#define cast_vote 3
extern  bool_t * cast_vote_1();
extern  bool_t * cast_vote_1_svc();
#define tally_results 4
extern  candidate_list * tally_results_1();
extern  candidate_list * tally_results_1_svc();
#define announce_winner 5
extern  char ** announce_winner_1();
extern  char ** announce_winner_1_svc();
#define add_candidate 6
extern  bool_t * add_candidate_1();
extern  bool_t * add_candidate_1_svc();
#define remove_candidate 7
extern  bool_t * remove_candidate_1();
extern  bool_t * remove_candidate_1_svc();
#define invalidate_candidate 8
extern  bool_t * invalidate_candidate_1();
extern  bool_t * invalidate_candidate_1_svc();
#define calc_statistics 9
extern  stats * calc_statistics_1();
extern  stats * calc_statistics_1_svc();
extern int election_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_voter (XDR *, voter*);
extern  bool_t xdr_candidate (XDR *, candidate*);
extern  bool_t xdr_candidate_stats (XDR *, candidate_stats*);
extern  bool_t xdr_stats (XDR *, stats*);
extern  bool_t xdr_voter_ptr (XDR *, voter_ptr*);
extern  bool_t xdr_candidate_list (XDR *, candidate_list*);
extern  bool_t xdr_register_voter_1_argument (XDR *, register_voter_1_argument*);
extern  bool_t xdr_cast_vote_1_argument (XDR *, cast_vote_1_argument*);

#else /* K&R C */
extern bool_t xdr_voter ();
extern bool_t xdr_candidate ();
extern bool_t xdr_candidate_stats ();
extern bool_t xdr_stats ();
extern bool_t xdr_voter_ptr ();
extern bool_t xdr_candidate_list ();
extern bool_t xdr_register_voter_1_argument ();
extern bool_t xdr_cast_vote_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_ELECTION_H_RPCGEN */
